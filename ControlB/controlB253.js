const net = require('net');
const Modbus = require('jsmodbus');
const fs = require('fs');

const socket = new net.Socket();
const client = new Modbus.client.TCP(socket, 1); // Unit ID = 1
const options = {
    host: '192.168.69.253',
    port: 502
};

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// L∆∞u tr·∫°ng th√°i tr∆∞·ªõc
let prevState = {}; // key = coil address, value = boolean

// H√†m x·ª≠ l√Ω
async function writeIfChanged() {
    const data = JSON.parse(fs.readFileSync('./Json/BlockB/DataSignalB253.json', 'utf8'));

    for (let item of data) {
        const coilAddress = 2000 + item.index253;
        const value = item.value === "1";

        // Ki·ªÉm tra n·∫øu gi√° tr·ªã kh√°c l·∫ßn tr∆∞·ªõc th√¨ m·ªõi ghi
        if (prevState[coilAddress] !== value) {
            try {
                await client.writeSingCoil(coilAddress, value);
                console.log(`üîÅ G·ª≠i l·ªánh ${value ? 'B·∫¨T' : 'T·∫ÆT'} coil ${coilAddress} (${item.signal})`);
                prevState[coilAddress] = value; // c·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
                await delay(100);
            } catch (err) {
                console.error(`‚ùå L·ªói t·∫°i coil ${coilAddress}:`, err.message);
            }
        } else {
            // Kh√¥ng thay ƒë·ªïi, b·ªè qua
            console.log(`‚è≠ Gi·ªØ nguy√™n coil ${coilAddress} (${item.signal})`);
        }
    }
}

// Ch·∫°y l·∫∑p sau m·ªói 5 gi√¢y
async function loopWrite() {
  while (true) {
    await writeIfChanged();
    console.log('‚è≥ Ch·ªù 5 gi√¢y...');
    await delay(5000);
  }
}

socket.on('connect', async () => {
  console.log('‚úÖ ƒê√£ k·∫øt n·ªëi Modbus TCP');
  await loopWrite(); // b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p
});

socket.on('error', err => {
  console.error('‚ùå L·ªói k·∫øt n·ªëi:', err.message);
});

socket.connect(options);
